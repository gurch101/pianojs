{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Soundfont","require","NUM_OCTAVES","KEYS_IN_OCTAVE","getColor","keyNumberInOctave","midiNoteToIndex","note","indexToMidiNote","idx","Piano","selectedKeys","className","color","selected","undefined","Array","map","val","octaveNum","PianoKey","App","state","currentTickIndex","midi","notes","getNotesForTick","tick","filter","ticks","durationTicks","reduce","acc","curr","previous","currentNoteIndex","findIndex","selectedNotes","setState","next","nextTickIndex","updatePosition","e","play","Object","keys","parseInt","forEach","piano","Midi","fromUrl","tracks","sort","a","b","console","log","instrument","AudioContext","this","style","textAlign","marginBottom","onClick","width","margin","min","max","length","onChange","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a9a6560.chunk.js","sourcesContent":["import React from \"react\";\nimport { Midi } from \"@tonejs/midi\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"./App.css\";\nconst Soundfont = require(\"soundfont-player\");\n\nconst NUM_OCTAVES = 7;\nconst KEYS_IN_OCTAVE = 12;\n\nconst getColor = keyNumberInOctave =>\n  (keyNumberInOctave <= 5 && keyNumberInOctave % 2 === 1) || (keyNumberInOctave > 5 && keyNumberInOctave % 2 === 0)\n    ? \"white\"\n    : \"black\";\n\nconst midiNoteToIndex = note => note - 21;\nconst indexToMidiNote = idx => idx + 21;\n\nfunction Piano({ selectedKeys }) {\n  return (\n    <div className=\"piano\">\n      <PianoKey color=\"white\" selected={selectedKeys[0] !== undefined} />\n      <PianoKey color=\"black\" selected={selectedKeys[1] !== undefined} />\n      <PianoKey color=\"white\" selected={selectedKeys[2] !== undefined} />\n      {[...Array(NUM_OCTAVES)].map((val, octaveNum) => {\n        return [...Array(KEYS_IN_OCTAVE)].map((val, idx) => {\n          return (\n            <PianoKey\n              color={getColor(idx + 1)}\n              selected={selectedKeys[octaveNum * KEYS_IN_OCTAVE + idx + 3] !== undefined}\n            />\n          );\n        });\n      })}\n      <PianoKey color=\"white\" selected={selectedKeys[87] !== undefined} />\n    </div>\n  );\n}\n\nconst PianoKey = ({ color, selected }) => (\n  <div className={`${color === \"black\" ? \"black-key\" : \"white-key\"} ${selected ? \"selected\" : \"\"}`}></div>\n);\n\nclass App extends React.Component {\n  state = {\n    currentTickIndex: -1,\n    midi: {},\n    selectedKeys: {},\n    notes: []\n  };\n  async componentDidMount() {\n    const midi = await Midi.fromUrl(\"/wheresmymind.mid\");\n    const notes = [...midi.tracks[0].notes, ...(midi.tracks[1] ? midi.tracks[1].notes : [])];\n    notes.sort((a, b) => (a.ticks - b.ticks === 0 ? a.durationTicks - b.durationTicks : a.ticks - b.ticks));\n    console.log(notes);\n    this.piano = await Soundfont.instrument(new AudioContext(), \"acoustic_grand_piano\");\n    this.setState({\n      midi,\n      notes\n    });\n  }\n\n  getNotesForTick = tick => {\n    const notes = this.state.notes;\n    return notes\n      .filter(note => note.ticks === tick || (note.ticks <= tick && note.ticks + note.durationTicks > tick))\n      .map(note => midiNoteToIndex(note.midi))\n      .reduce((acc, curr) => ({ ...acc, [curr]: true }), {});\n  };\n\n  previous = () => {\n    const notes = this.state.notes;\n    const currentNoteIndex = notes.findIndex(note => note.ticks === notes[this.state.currentTickIndex].ticks);\n    if (currentNoteIndex > 0) {\n      const selectedNotes = this.getNotesForTick(notes[currentNoteIndex - 1].ticks);\n      this.setState({\n        currentTickIndex: currentNoteIndex - 1,\n        selectedKeys: selectedNotes\n      });\n    }\n  };\n\n  next = () => {\n    const notes = this.state.notes;\n    let nextTickIndex = 0;\n    if (this.state.currentTickIndex !== -1) {\n      nextTickIndex = notes.findIndex(note => note.ticks > notes[this.state.currentTickIndex].ticks);\n    }\n    const selectedNotes = this.getNotesForTick(notes[nextTickIndex].ticks);\n    this.setState({\n      currentTickIndex: nextTickIndex,\n      selectedKeys: selectedNotes\n    });\n  };\n\n  updatePosition = e => {\n    const notes = this.state.notes;\n    this.setState({\n      currentTickIndex: e,\n      selectedKeys: this.getNotesForTick(notes[e].ticks)\n    });\n  };\n\n  play = () => {\n    Object.keys(this.state.selectedKeys)\n      .map(note => indexToMidiNote(parseInt(note)))\n      .forEach(note => {\n        this.piano.play(note);\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\n          <p style={{ color: \"white\" }}>{this.state.currentTickIndex}</p>\n          <button className=\"mr1\" onClick={this.previous}>\n            Previous\n          </button>\n          <button className=\"mr1\" onClick={this.next}>\n            Next\n          </button>\n          <button onClick={this.play}>Play</button>\n        </div>\n        <div style={{ width: \"50%\", margin: \"0 auto\", marginBottom: \"10px\" }}>\n          <Slider\n            min={0}\n            max={this.state.notes.length - 1}\n            onChange={this.updatePosition}\n            value={this.state.currentTickIndex}\n          />\n        </div>\n        <Piano selectedKeys={this.state.selectedKeys} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}